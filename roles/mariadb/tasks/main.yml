---
- name: Include distribution specific variables
  include_vars: "{{ distro }}.yml"

- name: Include distribution specific tasks
  include_tasks: "{{ distro }}.yml"

- name: Print all available facts
  ansible.builtin.debug:
    var: ansible_facts

- name: Start and enable MariaDB
  ansible.builtin.systemd:
    enabled: true
    name: mariadb
    state: started
  tags:
    - configuration
    - systemd-service

# mysql_secure_installation does 3 things;
# 1. Change the default root password
# 2. Remove anonymous users
# 3. Remove test database and access to it

# If the file /root/.my.cnf does not exist, mariadb_root_pass.changed will be true
- name: Generate new root password
  command: openssl rand -hex 8 creates=/root/.my.cnf
  register: mariadb_root_password
- debug: msg="New root password is {{ mariadb_root_password.stdout }}"
  when: mariadb_root_password.changed
- debug: msg="No change to root password"
  when: not mariadb_root_password.changed
  tags:
    - configuration
    - root-password

- name: Create my.cnf
  template: src=my.cnf dest=/root/.my.cnf
  when: mariadb_root_password.changed
  tags:
    - configuration
    - my-cnf

# root password change has not been applied at the database level yet
# socket authentication is used to connect to database as the root user
- name: Remove anonymous users
  community.mysql.mysql_user:
    login_user: root
    login_unix_socket: "{{ socket }}"
    name: ""
    state: absent
  tags:
    - configuration
    - remove-anonymous-users

- name: Remove test database
  community.mysql.mysql_db:
    login_user: root
    login_unix_socket: "{{ socket }}"
    name: test
    state: absent
  tags:
    - configuration
    - remove-test-database

- name: Update root password
  community.mysql.mysql_user:
    host: localhost
    login_user: root
    login_unix_socket: "{{ socket }}"
    name: root
    password: "{{ mariadb_root_password.stdout }}"
  when: mariadb_root_password.changed
  tags:
    - configuration
    - update-root-password

- name: Create admin user
  community.mysql.mysql_user:
    login_user: root
    login_unix_socket: "{{ socket }}"
    name: "{{ admin_user }}"
    password: "{{ admin_password_hash }}"
    encrypted: true
    host: "%"
    priv: "*.*:ALL,GRANT"
    state: present
  tags:
    - configuration
    - create-admin-user
